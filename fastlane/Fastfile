# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.24.0"

default_platform :ios

platform :ios do
  # desc "Runs all the tests"
  # lane :test do
  #   scan
  # end

  desc "Submit a new Beta Build to HockeyApp"
  lane :beta do
    next if ENV["TRAVIS_PULL_REQUEST"] != "false" or ENV["TRAVIS_BRANCH"] != "beta"

    keychain_name = "YumiMediationSDKExample-certs"
    keychain_password = SecureRandom.base64

    create_keychain(
      name: keychain_name,
      default_keychain: true,
      unlock: true,
      password: keychain_password,
      timeout: 3600
    )

    import_certificate(
      log_output: true,
      certificate_path: "fastlane/Certificates/ZplayAds_Distribute.p12",
      certificate_password: ENV["KEY_PASSWORD"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

    increment_build_number_in_plist(target: 'YumiMediationSDKDemo')
    increment_version_number_in_plist(
    target: 'YumiMediationSDKDemo',
    version_number: "3.3.6"
    )

    # Build
    gym(
      scheme: "YumiMediationSDKDemo",
      workspace: "YumiMediationSDKDemo.xcworkspace",
      configuration: "Release",
      clean: true,
      include_bitcode: false,
      include_symbols: true,
      export_method: "enterprise"
    )

    # Push to pgyer
    pgyer(
      api_key: "9a57e69885455c0dd7c80c02f6d438a5", 
      user_key: "542c17f75a2e4ab32af8ad236fbd6739",
      update_description: "update by fastlane"
    )

    # Push to HockeyApp
    hockey(
      api_token: "b23874100f5346cdb613ca63c57393eb",
      public_identifier: '4467afeb42404f82be3ab1495cccb594',
      notify: "1",
      status: "2",
      commit_sha: ENV["TRAVIS_COMMIT"],
      notes: ENV["TRAVIS_COMMIT_MESSAGE"],
    )

    delete_keychain(
      name: keychain_name
    )
  end

  desc "push archived files to oss"
  lane :pushOss do

    allAdapters = [
      { :name => "AdColony", :version => "3.3.7", :supportAdtype => "V" },
      { :name => "AdMob", :version => "7.44.0", :supportAdtype => "B+I+V+N+S" },
      { :name => "AppLovin", :version => "6.7.1", :supportAdtype => "B+V+I" },
      { :name => "Baidu", :version => "4.6.4", :supportAdtype => "B+I+V+N+S" },
      { :name => "Chartboost", :version => "7.5.0", :supportAdtype => "V+I" },
      { :name => "Facebook", :version => "5.3.2", :supportAdtype => "B+I+N+V" },
      { :name => "Domob", :version => "3.8.0", :supportAdtype => "V" },
      { :name => "GDT", :version => "4.10.3", :supportAdtype => "B+I+N+V+S" },
      { :name => "InMobi", :version => "8.1.0", :supportAdtype => "B+I+V" },
      { :name => "IronSource", :version => "6.8.3", :supportAdtype => "V+I" },
      { :name => "Unity", :version => "3.1.0", :supportAdtype => "I+V" },
      { :name => "Vungle", :version => "6.4.1", :supportAdtype => "I+V" },
      { :name => "Mintegral", :version => "5.3.3", :supportAdtype => "V+I"},
      { :name => "OneWay",:version => "2.1.0", :supportAdtype => "V"},
      { :name => "ZplayAds",:version => "2.4.2", :supportAdtype => "V+I"},
      # { :name => "IQzone", :version => "3.0.2141", :supportAdtype => "B+I+V" },
      { :name => "BytedanceAds", :version => "2.0.1.1", :supportAdtype => "B+I+N+V+S" },
      { :name => "InneractiveAdSDK", :version => "7.2.3", :supportAdtype => "B+I+V" },
      { :name => "TapjoySDK", :version => "12.3.1", :supportAdtype => "I+V" },
    ]
    sdkVersion = "YumiMediationSDK_v"+ ENV["TRAVIS_TAG"]
    podDir = '../Pods/'
    mediationSDKPath = podDir + sdkVersion
    thirdPartyPathName = mediationSDKPath +'/YumiMediationThirdPartys'
    debugcenterPathName = mediationSDKPath +'/YumiMediationDebugCenter-iOS'
    yumiMediationSDKPathName = mediationSDKPath +'/YumiMediationSDK'
    iOSDownloadPage =  mediationSDKPath + "/iOSDownloadPage.md"

    fastlane_require "aliyun/oss"
    fastlane_require "retries"
    fastlane_require 'fileutils'
    
    Dir.chdir("#{podDir}") do
      FileUtils.mkdir_p "#{sdkVersion}/YumiMediationThirdPartys"
      sh "touch #{iOSDownloadPage}"

      #mediationSDK
      puts "is copying SDK"
      srcYumiMediationSDKPath = podDir + 'YumiMediationSDK'
      FileUtils.mv(srcYumiMediationSDKPath,mediationSDKPath + "/YumiMediationSDK")
      sdkSource = "YumiMediationSDK-iOS.tar.bz2"
      sdkRemoteAddress = "http://adsdk.yumimobi.com/iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{sdkSource}"
      File.open(iOSDownloadPage,"a") do |file|
        file.puts("### SDK Download List" +" " + "#{ENV["TRAVIS_TAG"]}")
        file.puts(" ")
        file.puts("|    Name     | Version  | Support AdType | DownloadLink | Note |")
        file.puts("| :---------: | :------: | :------------: | :----------: | :--: |")
        file.puts("|    YumiMediationSDK    |  #{ENV["TRAVIS_TAG"]}  |    B+I+V+N+S     |   [link](#{sdkRemoteAddress})   |      |")
        file.puts("|        YumiMediationSDKConfig.xcconfig        |  #{ENV["TRAVIS_TAG"]}  |                | [link](https://adsdk.yumimobi.com/iOS/Archived/YumiMediationSDKConfig.xcconfig) |      |")
      end
      Dir.chdir("#{sdkVersion}") do
        #compress and upload to oss
        sh "tar cjf #{sdkSource} YumiMediationSDK"
        with_retries(max_tries: 10) do
          Aliyun::OSS::Client.new(
            :endpoint => "https://oss-cn-beijing.aliyuncs.com",
            :access_key_id => ENV["OSS_KEY_ID"],
            :access_key_secret => ENV["OSS_KEY_SECRET"]
          ).
          get_bucket("ad-sdk").
          put_object("iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{sdkSource}", :file => sdkSource)
        end
      end

      #debugCenter
      puts "is copying debugCenter"
      srcDebugcenterPath = podDir + 'YumiMediationDebugCenter-iOS'
      FileUtils.mv(srcDebugcenterPath,mediationSDKPath + "/YumiMediationDebugCenter-iOS")
      debugCenterSource = "YumiMediationDebugCenter-iOS.tar.bz2"
      debugRemoteAddress = "http://adsdk.yumimobi.com/iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{debugCenterSource}"
      File.open(iOSDownloadPage,"a") do |file|
        file.puts("|    YumiMediationDebugCenter    |  #{ENV["TRAVIS_TAG"]}  |         |   [link](#{debugRemoteAddress})   |      |")
      end
      Dir.chdir("#{sdkVersion}") do
        #compress and upload to oss
        sh "tar cjf #{debugCenterSource} YumiMediationDebugCenter-iOS"
        with_retries(max_tries: 10) do
          Aliyun::OSS::Client.new(
            :endpoint => "https://oss-cn-beijing.aliyuncs.com",
            :access_key_id => ENV["OSS_KEY_ID"],
            :access_key_secret => ENV["OSS_KEY_SECRET"]
          ).
          get_bucket("ad-sdk").
          put_object("iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{debugCenterSource}", :file => debugCenterSource)
        end
      end

      #adapter
      allAdapters.each do |thirdParty|
        adapterName = thirdParty[:name]
        version = thirdParty[:version]
        supportAdtype = thirdParty[:supportAdtype]

        puts "is copying #{adapterName}"
        if adapterName != "ZplayAds"
          thirdYumiSDKName = 'Yumi' + adapterName
        end
        thirdYumiMediationAdapterName = 'YumiMediation' + adapterName
        #copy adapters
        srcAdapterPath = podDir + 'YumiMediationAdapters' + '/'+ thirdYumiMediationAdapterName
        targetAdapterPath = thirdPartyPathName + '/'+ thirdYumiMediationAdapterName
        if adapterName != "ZplayAds"
          srcThirdSDKPath = podDir + thirdYumiSDKName
          targetThirdSDKPath = thirdPartyPathName + '/'+ thirdYumiMediationAdapterName + '/' +thirdYumiSDKName
        end

        FileUtils.mv(srcAdapterPath,targetAdapterPath)
        if adapterName != "ZplayAds"
          FileUtils.mv(srcThirdSDKPath,targetThirdSDKPath)
        end
        
        thirdSource = "#{thirdYumiMediationAdapterName}.tar.bz2"
        remoteAddress = "http://adsdk.yumimobi.com/iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{thirdSource}"
        File.open(iOSDownloadPage, "a") do |file|
          file.puts("|    #{adapterName}    |  #{version}  |   #{supportAdtype}      |   [link](#{remoteAddress})   |      |")
        end
        Dir.chdir("#{sdkVersion}/YumiMediationThirdPartys") do
          # compress and upload to oss
          sh "tar cjf #{thirdSource} #{thirdYumiMediationAdapterName}"
          sh "rm -rf #{thirdYumiMediationAdapterName}"
          with_retries(max_tries: 10) do
            Aliyun::OSS::Client.new(
              :endpoint => "https://oss-cn-beijing.aliyuncs.com",
              :access_key_id => ENV["OSS_KEY_ID"],
              :access_key_secret => ENV["OSS_KEY_SECRET"]
            ).
            get_bucket("ad-sdk").
            put_object("iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{thirdSource}", :file => thirdSource)
          end
        end
      end

      allThirdPartysSource = "allThirdPartys.tar.bz2"
      remoteAllThirdPartysAddress = "http://adsdk.yumimobi.com/iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{allThirdPartysSource}"
      File.open(iOSDownloadPage, "a") do |file|
        file.puts("|    AllThirdPartysAdapter    |  #{ENV["TRAVIS_TAG"]}  |         |   [link](#{remoteAllThirdPartysAddress})   |      |")
        file.puts(" ")
        file.puts("| shortName |   FullName   |")
        file.puts("| :-------: | :----------: |")
        file.puts("|     B     |    Banner    |")
        file.puts("|     I     | Interstitial |")
        file.puts("|     V     |    Video     |")
        file.puts("|     N     |    Native    |")
        file.puts("|     S     |    Splash    |")
      end
      Dir.chdir(sdkVersion) do
        sh "tar cjf #{allThirdPartysSource} YumiMediationThirdPartys"
        with_retries(max_tries: 10) do
          Aliyun::OSS::Client.new(
            :endpoint => "https://oss-cn-beijing.aliyuncs.com",
            :access_key_id => ENV["OSS_KEY_ID"],
            :access_key_secret => ENV["OSS_KEY_SECRET"]
          ).
          get_bucket("ad-sdk").
          put_object("iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{allThirdPartysSource}", :file => allThirdPartysSource)
        end
      end
      FileUtils.mv(iOSDownloadPage,"../normalDocuments/iOSDownloadPage.md")
    end
    


  end

 # pushToHockeyApp in local
  lane :pushToHockeyApp do
    # Build
    gym(
      scheme: "YumiMediationSDKDemo",
      workspace: "YumiMediationSDKDemo.xcworkspace",
      configuration: "Release",
      clean: true,
      include_bitcode: false,
      include_symbols: true,
      export_method: "enterprise"
    )

    # Push to HockeyApp
    hockey(
      api_token: "b23874100f5346cdb613ca63c57393eb",
      public_identifier: '4467afeb42404f82be3ab1495cccb594',
      notify: "1",
      status: "2",
      commit_sha: ENV["TRAVIS_COMMIT"],
      notes: ENV["TRAVIS_COMMIT_MESSAGE"],
    )
  end
  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
